{"mode":"Blocks","hardwareTarget":"brain","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"pg_mixed_multiline_command\" id=\"xbW5xOkEKS,nqmVueBvw\"><field name=\"MULTILINE_INPUT\">\"\"\" This button class lets you create and customize buttons. It also lets you be able to \r&amp;#10;detect presses and from that be able to control or initiate something. \"\"\"\r&amp;#10;class Button:\r&amp;#10;    def __init__(self, x, y, width, height, label, outline_color=Color.WHITE, text_color=Color.WHITE, gap=0, outsideLabel=\"\"):\r&amp;#10;        self.x = x\r&amp;#10;        self.y = y\r&amp;#10;        self.w = width\r&amp;#10;        self.h = height\r&amp;#10;        self.g = gap\r&amp;#10;        self.label = label\r&amp;#10;        self.Olabel = outsideLabel\r&amp;#10;        self.outline_color = outline_color\r&amp;#10;        self.text_color = text_color\r&amp;#10;        self._pressed_last = False\r&amp;#10;\r&amp;#10;    def draw(self):\r&amp;#10;        # Draw the button rectangle\r&amp;#10;        brain.screen.set_pen_color(self.outline_color)\r&amp;#10;        brain.screen.draw_rectangle(self.x, self.y, self.w, self.h)\r&amp;#10;\r&amp;#10;        # Draw the inside label (centered)\r&amp;#10;        char_width = 6\r&amp;#10;        char_height = 10\r&amp;#10;        text_width = len(self.label) * char_width\r&amp;#10;        text_height = char_height\r&amp;#10;\r&amp;#10;        text_x = self.x + (self.w - text_width) // 2\r&amp;#10;        text_y = self.y + (self.h - text_height) // 2\r&amp;#10;\r&amp;#10;        brain.screen.set_pen_color(self.text_color)\r&amp;#10;        brain.screen.print_at(self.label, text_x, text_y)\r&amp;#10;\r&amp;#10;        # Draw the outside label (horizontally aligned with button center)\r&amp;#10;        if self.Olabel:\r&amp;#10;            outside_text_width = len(self.Olabel) * char_width\r&amp;#10;            outside_text_height = char_height\r&amp;#10;\r&amp;#10;            outside_y = self.y + (self.h - outside_text_height) // 2\r&amp;#10;\r&amp;#10;            # Place the outside label to the right or left depending on gap\r&amp;#10;            if self.g &gt;= 0:\r&amp;#10;                outside_x = self.x + self.w + self.g\r&amp;#10;            else:\r&amp;#10;                outside_x = self.x + self.g - outside_text_width  # Adjust for text width when on left\r&amp;#10;\r&amp;#10;            brain.screen.print_at(self.Olabel, outside_x, outside_y)\r&amp;#10;\r&amp;#10;    def is_pressed(self, touch_x, touch_y):\r&amp;#10;        return (self.x &lt;= touch_x &lt;= self.x + self.w and\r&amp;#10;                self.y &lt;= touch_y &lt;= self.y + self.h)\r&amp;#10;\r&amp;#10;    def check_press(self):\r&amp;#10;        if brain.screen.pressing():\r&amp;#10;            x = brain.screen.x_position()\r&amp;#10;            y = brain.screen.y_position()\r&amp;#10;            if self.is_pressed(x, y):\r&amp;#10;                if not self._pressed_last:\r&amp;#10;                    self._pressed_last = True\r&amp;#10;                    return True\r&amp;#10;            else:\r&amp;#10;                self._pressed_last = False\r&amp;#10;        else:\r&amp;#10;            self._pressed_last = False\r&amp;#10;        return False\r&amp;#10;\r&amp;#10;#Simple example\r&amp;#10;button1 = Button(100, 100, 80, 40, \"Start\")\r&amp;#10;button2 = Button(100, 100, 80, 40, \"End\")\r&amp;#10;\r&amp;#10;def simple_Example():\r&amp;#10;    brain.screen.clear_screen()\r&amp;#10;    button1.draw()\r&amp;#10;    wait(100, MSEC)\r&amp;#10;    if button1.check_press():\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        button2.draw()\r&amp;#10;        wait(100, MSEC)\r&amp;#10;    if button2.check_press():\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        button1.draw()\r&amp;#10;        wait(100, MSEC)\r&amp;#10;\r&amp;#10;\"\"\" The complex example starts here\"\"\"\r&amp;#10;\r&amp;#10;#The complex example is taken straight from my code\r&amp;#10;settingsDisplayed = False\r&amp;#10;autonDisplayed = False\r&amp;#10;speedDisplayed = False\r&amp;#10;debugMode = False\r&amp;#10;auto = 0\r&amp;#10;speed_multiplier = 1\r&amp;#10;settingsMenu = Button(0, 0, 80, 40, \"Settings\", Color.WHITE, Color.WHITE)\r&amp;#10;autonMenu = Button(80, 100, 80, 40, \"Auto\", Color.WHITE, Color.WHITE, gap=0, outsideLabel=f\"{auto}\")\r&amp;#10;speedMenu = Button(200, 100, 80, 40, \"Speed\", Color.WHITE, Color.WHITE, gap=0, outsideLabel=f\"{speed_multiplier}\")\r&amp;#10;debugBTN = Button(320, 100, 80, 40, \"Debug\", Color.WHITE, Color.WHITE)\r&amp;#10;backBTN = Button(0, 0, 80, 40, \"Back\", Color.WHITE, Color.WHITE)\r&amp;#10;LSQ = Button(80, 60, 80, 40, \"LSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;RSQ = Button(200, 60, 80, 40, \"RSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;LSE = Button(320, 60, 80, 40, \"LSE\", Color.WHITE, Color.WHITE)\r&amp;#10;RSE = Button(140, 140, 80, 40, \"RSE\", Color.WHITE, Color.WHITE)\r&amp;#10;SKL = Button(260, 140, 80, 40, \"SKL\", Color.WHITE, Color.WHITE)\r&amp;#10;point5 = Button(56, 100, 80, 40, \"0.5\", Color.WHITE, Color.WHITE)\r&amp;#10;one = Button(152, 100, 80, 40, \"1\", Color.WHITE, Color.WHITE)\r&amp;#10;onePoint5 = Button(248, 100, 80, 40, \"1.5\", Color.WHITE, Color.WHITE)\r&amp;#10;two = Button(344, 100, 80, 40, \"2\", Color.WHITE, Color.WHITE)\r&amp;#10;\r&amp;#10;\r&amp;#10;def settings_Menu():\r&amp;#10;    global settingsDisplayed\r&amp;#10;    if settingsMenu.check_press():\r&amp;#10;        settingsDisplayed = True\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        autonMenu.draw()\r&amp;#10;        speedMenu.draw()\r&amp;#10;        debugBTN.draw()\r&amp;#10;        backBTN.draw()\r&amp;#10;\r&amp;#10;def auton_Menu():\r&amp;#10;    global autonDisplayed\r&amp;#10;    if autonMenu.check_press() and settingsDisplayed:\r&amp;#10;        autonDisplayed = True\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        backBTN.draw()\r&amp;#10;        LSQ.draw()\r&amp;#10;        LSE.draw()\r&amp;#10;        RSE.draw()\r&amp;#10;        RSQ.draw()\r&amp;#10;        SKL.draw()\r&amp;#10;\r&amp;#10;def select_Auton():\r&amp;#10;    global auto, autonDisplayed, settingsDisplayed, LSQ, RSQ, RSE, LSE, SKL\r&amp;#10;    if autonDisplayed and settingsDisplayed and LSQ.check_press():\r&amp;#10;        auto = 2\r&amp;#10;        LSQ = Button(80, 60, 80, 40, \"LSQ\", Color.GREEN, Color.GREEN)\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        RSQ = Button(200, 60, 80, 40, \"RSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSE = Button(320, 60, 80, 40, \"LSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        RSE = Button(140, 140, 80, 40, \"RSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        SKL = Button(260, 140, 80, 40, \"SKL\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSQ.draw()\r&amp;#10;        LSE.draw()\r&amp;#10;        RSE.draw()\r&amp;#10;        RSQ.draw()\r&amp;#10;        SKL.draw()\r&amp;#10;\r&amp;#10;    if autonDisplayed and settingsDisplayed and RSQ.check_press():\r&amp;#10;        auto = 1\r&amp;#10;        RSQ = Button(200, 60, 80, 40, \"RSQ\", Color.GREEN, Color.GREEN)\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        LSQ = Button(80, 60, 80, 40, \"LSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSE = Button(320, 60, 80, 40, \"LSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        RSE = Button(140, 140, 80, 40, \"RSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        SKL = Button(260, 140, 80, 40, \"SKL\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSQ.draw()\r&amp;#10;        LSE.draw()\r&amp;#10;        RSE.draw()\r&amp;#10;        RSQ.draw()\r&amp;#10;        SKL.draw()\r&amp;#10;\r&amp;#10;    if autonDisplayed and settingsDisplayed and LSE.check_press():\r&amp;#10;        auto = 4\r&amp;#10;        LSE = Button(320, 60, 80, 40, \"LSE\", Color.GREEN, Color.GREEN)\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        LSQ = Button(80, 60, 80, 40, \"LSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        RSQ = Button(200, 60, 80, 40, \"RSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        RSE = Button(140, 140, 80, 40, \"RSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        SKL = Button(260, 140, 80, 40, \"SKL\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSQ.draw()\r&amp;#10;        LSE.draw()\r&amp;#10;        RSE.draw()\r&amp;#10;        RSQ.draw()\r&amp;#10;        SKL.draw()\r&amp;#10;\r&amp;#10;    if autonDisplayed and settingsDisplayed and RSE.check_press():\r&amp;#10;        auto = 3\r&amp;#10;        RSE = Button(140, 140, 80, 40, \"RSE\", Color.GREEN, Color.GREEN)\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        LSQ = Button(80, 60, 80, 40, \"LSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        RSQ = Button(200, 60, 80, 40, \"RSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSE = Button(320, 60, 80, 40, \"LSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        SKL = Button(260, 140, 80, 40, \"SKL\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSQ.draw()\r&amp;#10;        LSE.draw()\r&amp;#10;        RSE.draw()\r&amp;#10;        RSQ.draw()\r&amp;#10;        SKL.draw()\r&amp;#10;\r&amp;#10;    if autonDisplayed and settingsDisplayed and SKL.check_press():\r&amp;#10;        auto = 5\r&amp;#10;        SKL = Button(260, 140, 80, 40, \"SKL\", Color.GREEN, Color.GREEN)\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        LSQ = Button(80, 60, 80, 40, \"LSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        RSQ = Button(200, 60, 80, 40, \"RSQ\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSE = Button(320, 60, 80, 40, \"LSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        RSE = Button(140, 140, 80, 40, \"RSE\", Color.WHITE, Color.WHITE)\r&amp;#10;        LSQ.draw()\r&amp;#10;        LSE.draw()\r&amp;#10;        RSE.draw()\r&amp;#10;        RSQ.draw()\r&amp;#10;        SKL.draw()\r&amp;#10;\r&amp;#10;def speed_Menu():\r&amp;#10;    global speedDisplayed, speed_multiplier\r&amp;#10;    if speedMenu.check_press() and settingsDisplayed:\r&amp;#10;        speedDisplayed = True\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        backBTN.draw()\r&amp;#10;        point5.draw()\r&amp;#10;        one.draw()\r&amp;#10;        onePoint5.draw()\r&amp;#10;        two.draw()\r&amp;#10;\r&amp;#10;def speed_Select():\r&amp;#10;    global settingsDisplayed, speedDisplayed, one, two, onePoint5, point5, speed_multiplier\r&amp;#10;    if speedDisplayed and settingsDisplayed and point5.check_press():\r&amp;#10;        speed_multiplier = 0.5\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        point5 = Button(56, 100, 80, 40, \"0.5\", Color.GREEN, Color.GREEN)\r&amp;#10;        one = Button(152, 100, 80, 40, \"1\", Color.WHITE, Color.WHITE)\r&amp;#10;        onePoint5 = Button(248, 100, 80, 40, \"1.5\", Color.WHITE, Color.WHITE)\r&amp;#10;        two = Button(344, 100, 80, 40, \"2\", Color.WHITE, Color.WHITE)\r&amp;#10;        point5.draw()\r&amp;#10;        one.draw()\r&amp;#10;        two.draw()\r&amp;#10;        onePoint5.draw()\r&amp;#10;        backBTN.draw()\r&amp;#10;\r&amp;#10;    if speedDisplayed and settingsDisplayed and one.check_press():\r&amp;#10;        speed_multiplier = 1.0\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        point5 = Button(56, 100, 80, 40, \"0.5\", Color.WHITE, Color.WHITE)\r&amp;#10;        one = Button(152, 100, 80, 40, \"1\", Color.GREEN, Color.GREEN)\r&amp;#10;        onePoint5 = Button(248, 100, 80, 40, \"1.5\", Color.WHITE, Color.WHITE)\r&amp;#10;        two = Button(344, 100, 80, 40, \"2\", Color.WHITE, Color.WHITE)\r&amp;#10;        point5.draw()\r&amp;#10;        one.draw()\r&amp;#10;        two.draw()\r&amp;#10;        onePoint5.draw()\r&amp;#10;        backBTN.draw()\r&amp;#10;    \r&amp;#10;    if speedDisplayed and settingsDisplayed and onePoint5.check_press():\r&amp;#10;        speed_multiplier = 1.5\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        point5 = Button(56, 100, 80, 40, \"0.5\", Color.WHITE, Color.WHITE)\r&amp;#10;        one = Button(152, 100, 80, 40, \"1\", Color.WHITE, Color.WHITE)\r&amp;#10;        onePoint5 = Button(248, 100, 80, 40, \"1.5\", Color.GREEN, Color.GREEN)\r&amp;#10;        two = Button(344, 100, 80, 40, \"2\", Color.WHITE, Color.WHITE)\r&amp;#10;        point5.draw()\r&amp;#10;        one.draw()\r&amp;#10;        two.draw()\r&amp;#10;        onePoint5.draw()\r&amp;#10;        backBTN.draw()\r&amp;#10;    \r&amp;#10;    if speedDisplayed and settingsDisplayed and point5.check_press():\r&amp;#10;        speed_multiplier = 0.5\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        point5 = Button(56, 100, 80, 40, \"0.5\", Color.WHITE, Color.WHITE)\r&amp;#10;        one = Button(152, 100, 80, 40, \"1\", Color.WHITE, Color.WHITE)\r&amp;#10;        onePoint5 = Button(248, 100, 80, 40, \"1.5\", Color.WHITE, Color.WHITE)\r&amp;#10;        two = Button(344, 100, 80, 40, \"2\", Color.GREEN, Color.GREEN)\r&amp;#10;        point5.draw()\r&amp;#10;        one.draw()\r&amp;#10;        two.draw()\r&amp;#10;        onePoint5.draw()\r&amp;#10;        backBTN.draw()\r&amp;#10;\r&amp;#10;def debug_Mode():\r&amp;#10;    global debugMode, debugBTN\r&amp;#10;    if debugBTN.check_press() and settingsDisplayed:\r&amp;#10;        if debugMode == False:\r&amp;#10;            debugMode = True\r&amp;#10;            brain.screen.clear_screen()\r&amp;#10;            debugBTN = Button(320, 120, 80, 40, \"Debug\", Color.GREEN, Color.GREEN)\r&amp;#10;            debugBTN.draw()\r&amp;#10;            autonMenu.draw()\r&amp;#10;            speedMenu.draw()\r&amp;#10;\r&amp;#10;        if debugMode == True:\r&amp;#10;            debugMode = False\r&amp;#10;            brain.screen.clear_screen()\r&amp;#10;            debugBTN = Button(320, 120, 80, 40, \"Debug\", Color.WHITE, Color.WHITE)\r&amp;#10;            debugBTN.draw()\r&amp;#10;            autonMenu.draw()\r&amp;#10;            speedMenu.draw()\r&amp;#10;    \r&amp;#10;def back_Button():\r&amp;#10;    global settingsDisplayed, autonDisplayed, speedDisplayed\r&amp;#10;    if settingsDisplayed and backBTN.check_press():\r&amp;#10;        settingsDisplayed = False\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;\r&amp;#10;    if settingsDisplayed and autonDisplayed and backBTN.check_press():\r&amp;#10;        autonDisplayed = False\r&amp;#10;        settingsDisplayed = True\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        autonMenu.draw()\r&amp;#10;        speedMenu.draw()\r&amp;#10;        debugBTN.draw()\r&amp;#10;        backBTN.draw()\r&amp;#10;\r&amp;#10;    if settingsDisplayed and speedDisplayed and backBTN.check_press():\r&amp;#10;        speedDisplayed = False\r&amp;#10;        settingsDisplayed = True\r&amp;#10;        brain.screen.clear_screen()\r&amp;#10;        autonMenu.draw()\r&amp;#10;        speedMenu.draw()\r&amp;#10;        debugBTN.draw()\r&amp;#10;        backBTN.draw()\r&amp;#10;\r&amp;#10;def when_Started():\r&amp;#10;    while True:\r&amp;#10;        settings_Menu()\r&amp;#10;        auton_Menu()\r&amp;#10;        speed_Menu()\r&amp;#10;        debug_Mode()\r&amp;#10;        back_Button()\r&amp;#10;        select_Auton()\r&amp;#10;\r&amp;#10;def autonomous():\r&amp;#10;    pass\r&amp;#10;\r&amp;#10;def user_control():\r&amp;#10;    pass\r&amp;#10;</field></block></next></block></xml>","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","virtualSkillsYear":"2023"}